#!/usr/bin/env python3
"""
Utility script to update stock names in the database.
This script provides multiple methods to collect stock names when AkShare API is unavailable.
"""

import sys
from pathlib import Path
import pandas as pd
import logging
from typing import Dict, Optional

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from database.operations import DatabaseOperations
from database.models import Stock

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# Hardcoded stock name mappings for common stocks
COMMON_STOCK_NAMES = {
    "000001": "平安银行",
    "000002": "万科A",
    "000021": "深科技",
    "000027": "深圳能源",
    "000034": "神州数码",
    "000039": "中集集团",
    "000062": "深圳华强",
    "000063": "中兴通讯",
    "000066": "中国长城",
    "000100": "TCL科技",
    "000157": "中联重科",
    "000158": "常山北明",
    "000166": "申万宏源",
    "000301": "东方盛虹",
    "000333": "美的集团",
    "000338": "潍柴动力",
    "000408": "藏格矿业",
    "000423": "东阿阿胶",
    "000425": "徐工机械",
    "000426": "兴业矿业",
    "000429": "粤高速A",
    "000513": "丽珠集团",
    "000519": "中兵红箭",
    "000538": "云南白药",
    "000559": "万向钱潮",
    "000564": "供销大集",
    "000568": "泸州老窖",
    "000596": "古井贡酒",
    "000617": "中油资本",
    "000625": "长安汽车",
    "000630": "铜陵有色",
    "000651": "格力电器",
    "000657": "中钨高新",
    "000661": "长春高新",
    "000708": "中信特钢",
    "000725": "京东方A",
    "000728": "国元证券",
    "000729": "燕京啤酒",
    "000733": "振华科技",
    "000738": "航发控制",
    "000750": "国海证券",
    "000768": "中航西飞",
    "000776": "广发证券",
    "000783": "长江证券",
    "000786": "北新建材",
    "000792": "盐湖股份",
    "000800": "一汽解放",
    "000807": "云铝股份",
    "000831": "五矿稀土",
    "000858": "五粮液",
    "000876": "新希望",
    "000877": "天山股份",
    "000883": "湖北能源",
    "000893": "亚钾国际",
    "000895": "双汇发展",
    "000921": "海信家电",
    "000932": "华菱钢铁",
    "000933": "神火股份",
    "000938": "紫光股份",
    "000958": "华夏银行",
    "000959": "首钢股份",
    "000963": "华东医药",
    "000975": "银泰黄金",
    "000977": "浪潮信息",
    "000983": "山西焦煤",
    "000987": "越秀资本",
    "000988": "华工科技",
    "000997": "新大陆",
    "000999": "华润三九",
    "600000": "浦发银行",
    "600009": "上海机场",
    "600010": "包钢股份",
    "600011": "华能国际",
    "600012": "皖通高速",
    "600015": "华夏银行",
    "600016": "民生银行",
    "600018": "上港集团",
    "600019": "宝钢股份",
    "600023": "浙能电力",
    "600025": "华能水电",
    "600026": "中远海能",
    "600027": "华电国际",
    "600028": "中国石化",
    "600029": "南方航空",
    "600030": "中信证券",
    "600031": "三一重工",
    "600036": "招商银行",
    "600038": "中直股份",
    "600039": "四川路桥",
    "600048": "保利发展",
    "600050": "中国联通",
    "600060": "海信视像",
    "600061": "国投资本",
    "600066": "宇通客车",
    "600079": "人福医药",
    "600085": "同仁堂",
    "600089": "特变电工",
    "600095": "哈高科",
    "600096": "云天化",
    "600104": "上汽集团",
    "600109": "国金证券",
    "600111": "北方稀土",
    "600115": "东方航空",
    "600118": "中国卫星",
    "600126": "杭钢股份",
    "600132": "重庆啤酒",
    "600143": "金发科技",
    "600150": "中国船舶",
    "600153": "建发股份",
    "600157": "永泰能源",
    "600160": "巨化股份",
    "600161": "天坛生物",
    "600176": "中国巨石",
    "600177": "雅戈尔",
    "600183": "生益科技",
    "600188": "兖矿能源",
    "600196": "复星医药",
    "600219": "南山铝业",
    "600221": "海航控股",
    "600233": "圆通速递",
    "600236": "桂冠电力",
    "600256": "广汇能源",
    "600276": "恒瑞医药",
    "600282": "南钢股份",
    "600298": "安琪酵母",
    "600299": "安迪苏",
    "600309": "万华化学",
    "600316": "洪都航空",
    "600329": "达仁堂",
    "600332": "白云山",
    "600346": "恒力石化",
    "600350": "山东高速",
    "600352": "浙江龙盛",
    "600362": "江西铜业",
    "600363": "联创光电",
    "600369": "西南证券",
    "600372": "昆药集团",
    "600377": "宁沪高速",
    "600378": "天科股份",
    "600390": "五矿资本",
    "600398": "海澜之家",
    "600406": "国电南瑞",
    "600415": "小商品城",
    "600418": "江淮汽车",
    "600426": "华鲁恒升",
    "600436": "片仔癀",
    "600438": "通威股份",
    "600460": "士兰微",
    "600482": "中国动力",
    "600483": "福能股份",
    "600487": "亨通光电",
    "600489": "中金黄金",
    "600497": "驰宏锌锗",
    "600515": "海航基础",
    "600517": "国网英大",
    "600518": "康美药业",
    "600519": "贵州茅台",
    "600521": "华海药业",
    "600522": "中天科技",
    "600536": "中国软件",
    "600547": "山东黄金",
    "600548": "深高速",
    "600549": "厦门钨业",
    "600562": "国睿科技",
    "600566": "济川药业",
    "600570": "恒生电子",
    "600578": "京能电力",
    "600580": "卧龙电驱",
    "600584": "长电科技",
    "600585": "海螺水泥",
    "600588": "用友网络",
    "600598": "北大荒",
    "600600": "青岛啤酒",
    "600602": "云赛智联",
    "600612": "老凤祥",
    "600637": "东方明珠",
    "600642": "申能股份",
    "600660": "福耀玻璃",
    "600663": "陆家嘴",
    "600673": "东阳光",
    "600674": "川投能源",
    "600685": "中船防务",
    "600688": "上海石化",
    "600690": "海尔智家",
    "600703": "三安光电",
    "600704": "物产中大",
    "600733": "北汽蓝谷",
    "600741": "华域汽车",
    "600745": "闻泰科技",
    "600760": "中航沈飞",
    "600765": "中航重机",
    "600795": "国电电力",
    "600803": "新奥股份",
    "600808": "马钢股份",
    "600809": "山西汾酒",
    "600816": "安信信托",
    "600839": "四川长虹",
    "600845": "宝信软件",
    "600862": "中航高科",
    "600863": "内蒙华电",
    "600871": "石化油服",
    "600873": "梅花生物",
    "600875": "东方电气",
    "600879": "航天电子",
    "600885": "宏发股份",
    "600886": "国投电力",
    "600887": "伊利股份",
    "600893": "航发动力",
    "600895": "张江高科",
    "600900": "长江电力",
    "600901": "江苏金租",
    "600905": "三峡能源",
    "600909": "华安证券",
    "600918": "中泰证券",
    "600919": "江苏银行",
    "600925": "苏能股份",
    "600926": "杭州银行",
    "600938": "中国海防",
    "600941": "中国移动",
    "600956": "新天绿能",
    "600958": "东方证券",
    "600967": "内蒙一机",
    "600968": "海油发展",
    "600985": "淮北矿业",
    "600988": "赤峰黄金",
    "600989": "宝丰能源",
    "600995": "文山电力",
    "600998": "九州通",
    "600999": "招商证券",
    "601006": "大秦铁路",
    "601009": "南京银行",
    "601012": "隆基绿能",
    "601018": "宁波港",
    "601021": "春秋航空",
    "601058": "赛轮轮胎",
    "601059": "太平洋",
    "601061": "中信建投",
    "601066": "中信建投",
    "601077": "渝农商行",
    "601088": "中国神华",
    "601099": "太平洋",
    "601100": "恒立液压",
    "601108": "财通证券",
    "601111": "中国国航",
    "601117": "中国化学",
    "601127": "小康股份",
    "601128": "常熟银行",
    "601136": "首创证券",
    "601138": "工业富联",
    "601155": "新城控股",
    "601162": "天风证券",
    "601166": "兴业银行",
    "601168": "西部矿业",
    "601169": "北京银行",
    "601179": "中国西电",
    "601186": "中国铁建",
    "601198": "东兴证券",
    "601211": "国泰君安",
    "601216": "君正集团",
    "601225": "陕西煤业",
    "601229": "上海银行",
    "601231": "环旭电子",
    "601233": "桐昆股份",
    "601236": "红塔证券",
    "601238": "广汽集团",
    "601288": "农业银行",
    "601298": "青岛港",
    "601318": "中国平安",
    "601319": "中国人保",
    "601328": "交通银行",
    "601336": "新华保险",
    "601360": "三六零",
    "601377": "兴业证券",
    "601390": "中国中铁",
    "601398": "工商银行",
    "601456": "国联证券",
    "601555": "东吴证券",
    "601567": "三星医疗",
    "601577": "长沙银行",
    "601598": "中国外运",
    "601600": "中国铝业",
    "601601": "中国太保",
    "601607": "上海医药",
    "601611": "中国核建",
    "601615": "明阳智能",
    "601618": "中国中冶",
    "601628": "中国人寿",
    "601633": "长城汽车",
    "601658": "邮储银行",
    "601665": "齐鲁银行",
    "601668": "中国建筑",
    "601669": "中国电建",
    "601688": "华泰证券",
    "601689": "拓普集团",
    "601696": "中银证券",
    "601698": "中国卫通",
    "601699": "潞安环能",
    "601717": "郑煤机",
    "601727": "上海电气",
    "601728": "中国电信",
    "601766": "中国中车",
    "601777": "力帆科技",
    "601788": "光大证券",
    "601799": "星宇股份",
    "601800": "中国交建",
    "601808": "中海油服",
    "601816": "京沪高铁",
    "601818": "光大银行",
    "601825": "沪农商行",
    "601838": "成都银行",
    "601857": "中国石油",
    "601865": "福莱特",
    "601866": "中远海发",
    "601868": "中国能建",
    "601869": "长飞光纤",
    "601872": "招商轮船",
    "601877": "正泰电器",
    "601878": "浙商证券",
    "601880": "大连港",
    "601881": "中国银河",
    "601888": "中国中免",
    "601898": "中煤能源",
    "601899": "紫金矿业",
    "601901": "方正证券",
    "601916": "浙商银行",
    "601919": "中远海控",
    "601928": "凤凰传媒",
    "601933": "永辉超市",
    "601939": "建设银行",
    "601958": "金钼股份",
    "601963": "重庆银行",
    "601985": "中国核电",
    "601988": "中国银行",
    "601989": "中国重工",
    "601990": "南京证券",
    "601991": "大唐发电",
    "601995": "中金公司",
    "601998": "中信银行",
    "603019": "中科曙光",
    "603087": "甘李药业",
    "603129": "春风动力",
    "603156": "养元饮品",
    "603160": "汇顶科技",
    "603195": "公牛集团",
    "603198": "迎驾贡酒",
    "603228": "景旺电子",
    "603259": "药明康德",
    "603260": "合盛硅业",
    "603268": "松发股份",
    "603288": "海天味业",
    "603296": "利元亨",
    "603298": "杉杉股份",
    "603369": "今世缘",
    "603379": "三美股份",
    "603392": "万泰生物",
    "603486": "科沃斯",
    "603501": "韦尔股份",
    "603529": "爱玛科技",
    "603568": "伟明环保",
    "603596": "伯特利",
    "603605": "珀莱雅",
    "603606": "东方电缆",
    "603659": "璞泰来",
    "603737": "三棵树",
    "603766": "隆鑫通用",
    "603799": "华友钴业",
    "603806": "福斯特",
    "603833": "欧派家居",
    "603885": "吉祥航空",
    "603893": "瑞芯微",
    "603899": "晨光文具",
    "603939": "益丰药房",
    "603979": "金诚信",
    "603986": "兆易创新",
    "603993": "洛阳钼业",
}

def update_stock_names_from_mapping():
    """Update stock names using the hardcoded mapping"""
    logger.info("Updating stock names from hardcoded mapping...")
    
    try:
        with DatabaseOperations() as db_ops:
            updated_count = 0
            total_count = 0
            
            # Get all stocks in database
            stocks = db_ops.db.query(Stock).all()
            total_count = len(stocks)
            
            for stock in stocks:
                if stock.code in COMMON_STOCK_NAMES:
                    new_name = COMMON_STOCK_NAMES[stock.code]
                    if stock.name != new_name:
                        stock.name = new_name
                        updated_count += 1
                        logger.debug(f"Updated {stock.code}: {new_name}")
            
            db_ops.db.commit()
            logger.info(f"Successfully updated {updated_count}/{total_count} stock names")
            
            # Show statistics
            stocks_with_names = db_ops.db.query(Stock).filter(Stock.name.isnot(None)).count()
            logger.info(f"Total stocks with names: {stocks_with_names}/{total_count}")
            
    except Exception as e:
        logger.error(f"Failed to update stock names: {e}")
        raise

def try_akshare_update():
    """Try to update stock names using AkShare API"""
    logger.info("Attempting to update stock names using AkShare API...")
    
    try:
        import akshare as ak
        
        # Try to get data from AkShare
        df = ak.stock_zh_a_spot_em()
        logger.info(f"Successfully fetched {len(df)} records from AkShare")
        
        # Process the data
        if "代码" in df.columns and "名称" in df.columns:
            df_clean = df[["代码", "名称"]].rename(columns={"代码": "code", "名称": "name"})
            df_clean["code"] = df_clean["code"].str.zfill(6)
            
            # Update database
            with DatabaseOperations() as db_ops:
                updated_count = 0
                
                for _, row in df_clean.iterrows():
                    code = row["code"]
                    name = row["name"]
                    
                    if pd.notna(name) and name.strip():
                        stock = db_ops.db.query(Stock).filter(Stock.code == code).first()
                        if stock and stock.name != name:
                            stock.name = name
                            updated_count += 1
                
                db_ops.db.commit()
                logger.info(f"Updated {updated_count} stock names from AkShare API")
                
        else:
            logger.warning("Expected columns not found in AkShare response")
            return False
            
        return True
        
    except Exception as e:
        logger.warning(f"AkShare API update failed: {e}")
        return False

def main():
    """Main function to update stock names"""
    logger.info("Starting stock name update process...")
    
    # First try AkShare API
    if try_akshare_update():
        logger.info("✓ Successfully updated stock names using AkShare API")
    else:
        logger.info("AkShare API failed, using hardcoded mapping...")
        update_stock_names_from_mapping()
        logger.info("✓ Successfully updated stock names using hardcoded mapping")
    
    # Show final statistics
    try:
        with DatabaseOperations() as db_ops:
            total_stocks = db_ops.db.query(Stock).count()
            stocks_with_names = db_ops.db.query(Stock).filter(Stock.name.isnot(None)).count()
            
            logger.info("="*50)
            logger.info("FINAL STATISTICS:")
            logger.info(f"Total stocks in database: {total_stocks}")
            logger.info(f"Stocks with names: {stocks_with_names}")
            logger.info(f"Coverage: {stocks_with_names/total_stocks*100:.1f}%")
            
            # Show some examples
            logger.info("\nSample updated records:")
            samples = db_ops.db.query(Stock).filter(Stock.name.isnot(None)).limit(5).all()
            for stock in samples:
                logger.info(f"  {stock.code}: {stock.name}")
                
    except Exception as e:
        logger.error(f"Failed to get final statistics: {e}")

if __name__ == "__main__":
    main()
